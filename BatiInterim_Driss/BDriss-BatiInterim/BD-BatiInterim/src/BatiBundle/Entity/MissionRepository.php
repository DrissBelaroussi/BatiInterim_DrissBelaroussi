<?php

namespace BatiBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * MissionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MissionRepository extends EntityRepository {

    public function getMissionDate($date, $idCm) {

        $qb = $this->createQueryBuilder('a');
//                ->where(':date BETWEEN c.datedebut AND c.datefin')
//                ->andWhere(':date BETWEEN c.datedebut AND c.datefin')
//                ->andWhere('a.idcorpsmetier = :cm')
//                ->setParameter('date', $date)
//                ->setParameter('cm', $idCm)
//                ;
        $qb->where('a.datedebut <= :datedebut')->setParameter('datedebut', $date)
                ->andWhere('a.datefin >= :datefin')->setParameter('datefin', $date)
                ->andWhere('a.idcorpsmetier >= :cm')->setParameter('cm', $idCm);
        $affect = $qb->getQuery()->getResult();


        if ($affect) {

            return $affect;
        } else {
            return null;
        }
    }

    public function getMissionDateCM($dateDebut, $dateFin, $idCM) {

        $qb = $this->createQueryBuilder('c')
//                ->where(':datedebut BETWEEN c.datedebut AND c.datefin')
//                ->andWhere('c.idcorpsmetier = :cm')
//                
//                ->orWhere(':datefin BETWEEN c.datedebut AND c.datefin')
//                ->andWhere('c.idcorpsmetier = :cm')
//                
////                ->orWhere(' c.datedebut BETWEEN :datedebut AND :datefin')
////                ->andWhere(' c.datefin BETWEEN :datedebut AND :datefin')
////                ->andWhere('c.idcorpsmetier >= :cm')
//                
//                ->orWhere(' c.datedebut <= :datedebut ')
//                ->andWhere(' c.datefin >= :datefin')
//                ->andWhere('c.idcorpsmetier = :cm')
//                
//                ->setParameter('datefin', $dateFin)
//                ->setParameter('datedebut', $dateDebut)
//                ->setParameter('cm', $idCM)
//                ;
//                ->where(':datedebut <= c.datedebut AND :datefin <= c.datefin')
//                ->andWhere('c.idcorpsmetier = :cm')
//                ->orWhere(':datedebut <= c.datedebut AND :datefin >= c.datefin') faux
//                ->andWhere('c.idcorpsmetier = :cm')
//                ->orWhere(':datedebut >= c.datedebut AND :datefin >= c.datefin') incomplet
//                ->andWhere('c.idcorpsmetier = :cm')
//                ->orWhere(':datedebut >= c.datedebut AND :datefin <= c.datefin')
//                ->andWhere('c.idcorpsmetier = :cm')
//                ->setParameter('datefin', $dateFin)
//                ->setParameter('datedebut', $dateDebut)
//                ->setParameter('cm', $idCM);

                
                
                 ->where(':datedebut <= c.datedebut AND :datefin <= c.datefin')
                ->andWhere('c.idcorpsmetier = :cm')
                ->orWhere(':datedebut >= c.datedebut AND :datefin <= c.datefin')
                ->andWhere('c.idcorpsmetier = :cm')
                ->orWhere(':datedebut <= c.datefin AND :datefin >= c.datedebut')
                ->andWhere('c.idcorpsmetier = :cm')
                ->orWhere(':datedebut >= c.datedebut AND :datefin <= c.datefin')
                ->andWhere('c.idcorpsmetier = :cm')
                ->setParameter('datefin', $dateFin)
                ->setParameter('datedebut', $dateDebut)
                ->setParameter('cm', $idCM);
        
        
//         ->where('c.datedebut <= :datedebut')->setParameter('datedebut', $dateDebut)
//                ->andWhere('c.datefin >= :datefin')->setParameter('datefin', $dateDebut)
//                ->andWhere('c.idcorpsmetier >= :cm')->setParameter('cm', $idCM)
//                ->orWhere('c.datedebut <= :datedebut')->setParameter('datefin', $dateFin)
//                ->andWhere('c.datefin >= :datefin')->setParameter('datefin', $dateFin)
//                ->andWhere('c.idcorpsmetier >= :cm')->setParameter('cm', $idCM);
                
                
                
                
                 

        $conges = $qb->getQuery()->getResult();


        if ($conges) {

            return $conges;
        } else {
            return null;
        }
    }

}
