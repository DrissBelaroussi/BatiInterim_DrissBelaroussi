<?php

namespace BatiBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * CongeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CongeRepository extends EntityRepository {

    public function getCongeDate($date, $idCM) {

//        $qb = $this->createQueryBuilder('c') ;
//        $qb->where('c.datedebut <= :datedebut')->setParameter('datedebut', $date)
//            ->andWhere('c.datefin >= :datefin')->setParameter('datefin', $date) ;
//        
//        $conges = $qb->getQuery()->getResult() ;

        $conges = $this->createQueryBuilder('c')
                ->innerJoin('c.idartisan', 'a')
                ->where('c.datedebut <= :datedebut')->setParameter('datedebut', $date)
                ->andWhere('c.datefin >= :datefin')->setParameter('datefin', $date)
                ->andWhere('a.idcorpsmetier = :cm')
                ->setParameter('datefin', $date)
                ->setParameter('datedebut', $date)
                ->setParameter('cm', $idCM)
//                ->innerJoin('c.idartisan', 'a')
//                ->where(':date BETWEEN c.datedebut AND c.datefin')
//                ->andWhere(':date BETWEEN c.datedebut AND c.datefin')
//                ->andWhere('a.idcorpsmetier = :cm')
//                ->setParameter('date', $date)
//                ->setParameter('cm', $idCM)
                ->getQuery()
                ->getResult();

//        $qb = $this->_em->createQuery('SELECT c,a FROM Conge u JOIN u.idartisan a where  a.idcorpsmetier := cm '
//                . 'and  c.datedebut <= :datedebut and c.datefin >= :datefin' )
//                ->setParameter('datedebut', $date)
//                ->setParameter('datefin', $date) ; 
//        
//        $conges = $qb->getQuery()->getResult() ;

        if ($conges) {

            return $conges;
        } else {
            return null;
        }
    }

    public function getCongeDateCM($dateDebut, $dateFin, $idCM) {


        $conges = $this->createQueryBuilder('c')
        ->innerJoin('c.idartisan', 'a')

//                ->where(':datedebut BETWEEN c.datedebut AND c.datefin')
//                ->andWhere('a.idcorpsmetier = :cm')
//                
//                ->orWhere(':datefin BETWEEN c.datedebut AND c.datefin')
//                ->andWhere('a.idcorpsmetier = :cm')
//                
//                ->orWhere(' c.datedebut BETWEEN :datedebut AND :datefin')
//                ->andWhere('a.idcorpsmetier = :cm')
//                
//                ->orWhere(' c.datefin BETWEEN :datedebut AND :datefin')
//                ->andWhere('a.idcorpsmetier = :cm')
//                ->where(':datedebut BETWEEN c.datedebut AND c.datefin')
//                ->andWhere('a.idcorpsmetier = :cm')
//                
//                ->orWhere(':datefin BETWEEN c.datedebut AND c.datefin')
//                ->andWhere('a.idcorpsmetier = :cm')
//                
//                ->orWhere(' c.datedebut < :datedebut ')
//                ->andWhere(' c.datefin > :datefin')
//                ->andWhere('a.idcorpsmetier = :cm')
                
                
//        ->where(':datedebut <= c.datedebut AND :datefin <= c.datefin')
//        ->andWhere('a.idcorpsmetier = :cm')
//        ->orWhere(':datedebut <= c.datedebut AND :datefin >= c.datefin')
//        ->andWhere('a.idcorpsmetier = :cm')
//        ->orWhere(':datedebut >= c.datedebut AND :datefin >= c.datefin')
//        ->andWhere('a.idcorpsmetier = :cm')
//        ->orWhere(':datedebut >= c.datedebut AND :datefin <= c.datefin')
//        ->andWhere('a.idcorpsmetier = :cm')
//
//        ->setParameter('datefin', $dateDebut)
//                ->setParameter('datedebut', $dateFin)
//                ->setParameter('cm', $idCM)
//                ->distinct()


                ->where('c.datedebut <= :datedebut')->setParameter('datedebut', $dateDebut)
                ->andWhere('c.datefin >= :datefin')->setParameter('datefin', $dateDebut)
                ->andWhere('a.idcorpsmetier = :cm')
                ->orWhere('c.datedebut <= :datedebut')->setParameter('datefin', $dateFin)
                ->andWhere('c.datefin >= :datefin')->setParameter('datefin', $dateFin)
                ->andWhere('a.idcorpsmetier = :cm')
                 ->setParameter('cm', $idCM)
                ->getQuery()
                ->getResult();

        if ($conges) {

            return $conges;
        } else {
            return null;
        }
    }

    public function supprimerConge($idConge) {
        $query = $this->_em->createQuery('delete from BatiBundle:Conge c where c.id =:idConge')
                ->setParameter('idConge', $idConge);

        $result = $query->execute();
        return $result;
    }
    
    public function supprimerConges($idArtisan) {
        $query = $this->_em->createQuery('delete from BatiBundle:Conge c where c.idartisan =:idartisan')
                ->setParameter('idartisan', $idArtisan);

        $result = $query->execute();
        return $result;
    }

    public function isCongeExists($debut, $fin, $idArtisan) {

        $conges = $this->createQueryBuilder('c')
                ->where(':datedebut BETWEEN c.datedebut AND c.datefin')
                ->andWhere('c.idartisan = :idartisan')
                ->orWhere(':datefin BETWEEN c.datedebut AND c.datefin')
                ->andWhere('c.idartisan = :idartisan')
                ->orWhere(' c.datedebut BETWEEN :datedebut AND :datefin')
                ->andWhere('c.idartisan = :idartisan')
                ->orWhere(' c.datefin BETWEEN :datedebut AND :datefin')
                ->andWhere('c.idartisan = :idartisan')
                ->setParameter('datefin', $fin)
                ->setParameter('datedebut', $debut)
                ->setParameter('idartisan', $idArtisan)
                ->getQuery()
                ->getResult();

        if ($conges) {

            return true;
        } else {
            return false;
        }
    }

}
